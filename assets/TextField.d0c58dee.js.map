{"version":3,"file":"TextField.d0c58dee.js","sources":["../../src/components/checkbox-button/CheckboxButton.tsx","../../src/components/inputs/FieldError.tsx","../../src/components/inputs/CheckboxField.tsx","../../src/components/radio-button/RadioButton.tsx","../../src/components/inputs/RadioField.tsx","../../src/components/inputs/Select.tsx","../../src/components/inputs/TextArea.tsx","../../src/components/inputs/TextField.tsx"],"sourcesContent":["import { ChangeEvent, DetailedHTMLProps, forwardRef, InputHTMLAttributes, useCallback } from 'react';\nimport { checkboxStyles } from './checkbox.css';\ntype Props = {\n  disabled?: boolean;\n  checked: boolean;\n  onChangeHandler: (checked: boolean) => void;\n  dataSAId?: string;\n} & DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\n\nexport const CheckboxButton = forwardRef<HTMLInputElement, Props>(\n  ({ checked, onChangeHandler, disabled, dataSAId, ...rest }, ref) => {\n    const handleChange = useCallback(\n      (e: ChangeEvent<HTMLInputElement>) => {\n        onChangeHandler(e.target.checked);\n      },\n      [onChangeHandler],\n    );\n\n    return (\n      <span className={checkboxStyles.container({ checked, disabled })} data-sa-id={dataSAId}>\n        <input\n          type=\"checkbox\"\n          className={checkboxStyles.input}\n          {...rest}\n          ref={ref}\n          onChange={handleChange}\n          checked={checked}\n        />\n        <span className={checkboxStyles.containerIcons}>\n          <svg className={checkboxStyles.svgRound} focusable=\"false\" viewBox=\"0 0 24 24\">\n            <path d=\"M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z\"></path>\n          </svg>\n          <svg className={checkboxStyles.svgInside({ checked })} focusable=\"false\" viewBox=\"0 0 24 24\">\n            <path d=\"M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\"></path>{' '}\n          </svg>\n        </span>\n      </span>\n    );\n  },\n);\n","import { memo, ReactNode } from 'react';\nimport { Paragraph } from '../typography';\nimport { fieldErrorStyle } from './error.css';\n\nexport const FieldError = memo<{ errorText?: ReactNode }>(({ errorText }) => {\n  if (!errorText) return null;\n\n  return (\n    <Paragraph variant=\"note\" className={fieldErrorStyle}>\n      {errorText}\n    </Paragraph>\n  );\n});\n","import { DetailedHTMLProps, FC, InputHTMLAttributes, MouseEvent, ReactNode, useCallback, useId, useRef } from 'react';\nimport { clsx } from '../../utils/clsx';\nimport { CheckboxButton } from '../checkbox-button/CheckboxButton';\nimport { checkStyles } from './check.css';\nimport { FieldError } from './FieldError';\n\ntype Props = {\n  label: ReactNode;\n  errorText?: ReactNode;\n  className?: string;\n  disabled?: boolean;\n  checked?: boolean;\n  inputProps?: DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\n  onChange?: (checked: boolean) => void;\n  border?: 'black' | 'grey';\n  bRadius?: 8 | 10;\n  containerClassName?: string;\n  variant?: 'field' | 'row';\n  dataSAId?: string;\n};\n\nexport const CheckboxField: FC<Props> = ({\n  errorText,\n  className,\n  label,\n  disabled = false,\n  checked,\n  inputProps = {},\n  onChange,\n  border,\n  bRadius,\n  containerClassName,\n  variant = 'field',\n  dataSAId,\n}) => {\n  const id = useId();\n  const ref = useRef<HTMLInputElement | null>(null);\n\n  const onChangeHandler = useCallback(\n    (c: boolean) => {\n      if (disabled) return;\n      onChange?.(c);\n    },\n    [onChange, disabled],\n  );\n  const onClickHandler = useCallback(\n    (e: MouseEvent<HTMLDivElement, globalThis.MouseEvent>) => {\n      e.preventDefault();\n      if (disabled) return;\n      onChangeHandler(!checked);\n      if (ref.current) {\n        ref.current.checked = !checked;\n      }\n    },\n    [onChangeHandler, disabled],\n  );\n\n  return (\n    <div className={className}>\n      <div\n        className={clsx(\n          variant === 'field'\n            ? checkStyles.containerStyle({ disabled, error: !!errorText, border, bRadius })\n            : checkStyles.containerRow({\n                disabled,\n              }),\n          containerClassName,\n        )}\n        onClick={onClickHandler}\n        data-sa-id={dataSAId}\n      >\n        <CheckboxButton\n          id={id}\n          checked={!!checked}\n          onChangeHandler={onChangeHandler}\n          disabled={disabled}\n          {...inputProps}\n          ref={ref}\n        />\n        <label htmlFor={id} className={checkStyles.labelStyle({ disabled })}>\n          {label}\n        </label>\n      </div>\n      <FieldError errorText={errorText} />\n    </div>\n  );\n};\n","import { ChangeEvent, DetailedHTMLProps, forwardRef, InputHTMLAttributes, useCallback } from 'react';\nimport { radioBtnStyles } from './radio.css';\n\ntype Props = {\n  disabled?: boolean;\n  checked: boolean;\n  onChangeHandler: (checked: boolean) => void;\n  dataSAId?: string;\n} & DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\n\nexport const RadioButton = forwardRef<HTMLInputElement, Props>(\n  ({ checked, onChangeHandler, disabled, dataSAId, ...rest }, ref) => {\n    const handleChange = useCallback(\n      (e: ChangeEvent<HTMLInputElement>) => {\n        onChangeHandler(e.target.checked);\n      },\n      [onChangeHandler],\n    );\n\n    return (\n      <span className={radioBtnStyles.container({ checked, disabled })} data-sa-id={dataSAId}>\n        <input type=\"radio\" className={radioBtnStyles.input} {...rest} ref={ref} onChange={handleChange} checked={checked} />\n        <span className={radioBtnStyles.containerIcons}>\n          <svg className={radioBtnStyles.svgRound} focusable=\"false\" viewBox=\"0 0 24 24\">\n            <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z\"></path>\n          </svg>\n          <svg className={radioBtnStyles.svgInside({ checked })} focusable=\"false\" viewBox=\"0 0 24 24\">\n            <path d=\"M8.465 8.465C9.37 7.56 10.62 7 12 7C14.76 7 17 9.24 17 12C17 13.38 16.44 14.63 15.535 15.535C14.63 16.44 13.38 17 12 17C9.24 17 7 14.76 7 12C7 10.62 7.56 9.37 8.465 8.465Z\"></path>\n          </svg>\n        </span>\n      </span>\n    );\n  },\n);\n","import { DetailedHTMLProps, FC, InputHTMLAttributes, ReactNode, useCallback, useId, useRef } from 'react';\nimport { clsx } from '../../utils/clsx';\nimport { RadioButton } from '../radio-button/RadioButton';\nimport { FieldError } from './FieldError';\nimport { radioStyles } from './radio.css';\n\ntype Props = {\n  label: ReactNode;\n  errorText?: ReactNode;\n  className?: string;\n  disabled?: boolean;\n  checked?: boolean;\n  radioProps?: DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\n  onChange?: (checked: boolean) => void;\n  border?: 'black' | 'grey';\n  bRadius?: 8 | 10;\n  containerClassName?: string;\n  dataSAId?: string;\n};\n\nexport const RadioField: FC<Props> = ({\n  errorText,\n  className,\n  label,\n  disabled = false,\n  checked,\n  radioProps = {},\n  onChange,\n  border,\n  bRadius,\n  containerClassName,\n  dataSAId,\n}) => {\n  const id = useId();\n  const ref = useRef<HTMLInputElement | null>(null);\n\n  const onChangeHandler = useCallback(\n    (c: boolean) => {\n      if (disabled) return;\n      onChange?.(!c);\n    },\n    [onChange, disabled],\n  );\n  const onClickHandler = useCallback(() => {\n    if (disabled) return;\n    onChange?.(true);\n    if (ref.current) {\n      ref.current.checked = true;\n    }\n  }, [onChange, disabled]);\n\n  return (\n    <div className={className}>\n      <div\n        className={clsx(radioStyles.containerStyle({ disabled, error: !!errorText, border, bRadius }), containerClassName)}\n        onClick={onClickHandler}\n        data-sa-id={dataSAId}\n      >\n        <RadioButton\n          id={id}\n          checked={!!checked}\n          onChangeHandler={onChangeHandler}\n          disabled={disabled}\n          {...radioProps}\n          ref={ref}\n        />\n        <label htmlFor={id} className={radioStyles.labelStyle({ disabled })}>\n          {label}\n        </label>\n      </div>\n      <FieldError errorText={errorText} />\n    </div>\n  );\n};\n","import { DetailedHTMLProps, ReactNode, SelectHTMLAttributes, useCallback, useRef, useState } from 'react';\nimport { useClickOutside } from '../../hooks/useClickOutside';\nimport { useEventListener } from '../../hooks/useEventListener';\nimport { ArrowDownSline, ArrowUpSline } from '../../icons';\nimport { clsx } from '../../utils/clsx';\nimport { DropDownMenu } from '../dropdown-menu';\nimport { FieldError } from './FieldError';\nimport { selectStyles } from './select.css';\n\ntype Props<TOption> = {\n  disabled?: boolean;\n  errorText?: ReactNode;\n  onChangeSelect?: (selected: TOption, name?: string) => void;\n  selectedOptionLabel: string;\n  selectedOption: TOption;\n  options: {\n    title: string;\n    value: TOption;\n  }[];\n  className?: string;\n  border?: 'black' | 'grey';\n  fullWidth?: boolean;\n  bRadius?: 8 | 10;\n  label?: string;\n  containerClassName?: string;\n  dataSAId?: string;\n} & DetailedHTMLProps<SelectHTMLAttributes<HTMLSelectElement>, HTMLSelectElement>;\n\nexport function Select<TOption>({\n  disabled,\n  onChangeSelect,\n  selectedOptionLabel,\n  containerClassName,\n  options,\n  errorText,\n  className,\n  selectedOption,\n  border,\n  fullWidth,\n  bRadius,\n  label,\n  dataSAId,\n  ...rest\n}: Props<TOption>) {\n  const [isOpen, setOpen] = useState(false);\n\n  const ref = useRef<HTMLDivElement>(null);\n  const mainRef = useRef<HTMLDivElement>(null);\n\n  const toggle = useCallback(() => {\n    if (disabled) return;\n    setOpen(v => !v);\n  }, [disabled]);\n  const close = useCallback(() => setOpen(false), []);\n  useEventListener('keyup', close, 'Escape');\n  useClickOutside(ref, close, mainRef);\n\n  const selectItem = useCallback(\n    (optionValue: TOption) => {\n      onChangeSelect?.(optionValue, rest.name);\n      close();\n    },\n    [onChangeSelect],\n  );\n\n  const valueForSelect =\n    typeof selectedOption === 'number' || typeof selectedOption === 'string' ? selectedOption : String(selectedOption);\n\n  return (\n    <div className={className}>\n      <select\n        data-sa-id={dataSAId ? `${dataSAId}-select` : dataSAId}\n        disabled\n        value={valueForSelect}\n        className={selectStyles.select}\n        {...rest}\n      >\n        <option value={valueForSelect}>{selectedOptionLabel}</option>\n      </select>\n      <div\n        onClick={toggle}\n        className={clsx(\n          selectStyles.container({ disabled, error: !!errorText, opened: isOpen, border, fullWidth, bRadius }),\n          containerClassName,\n        )}\n        ref={mainRef}\n        data-sa-id={dataSAId}\n      >\n        {label ? <span className={selectStyles.label}>{label}</span> : null}\n        <span className={selectStyles.text({ withLabel: !!label })}>{selectedOptionLabel}</span>\n        <div>\n          {isOpen ? (\n            <ArrowUpSline className={selectStyles.iconStyle} />\n          ) : (\n            <ArrowDownSline className={selectStyles.iconStyle} />\n          )}\n        </div>\n        <DropDownMenu\n          menuRef={ref}\n          isOpen={isOpen}\n          mainRef={mainRef}\n          selectedOption={selectedOption}\n          selectItem={selectItem}\n          options={options}\n          size=\"l\"\n          bRadius={bRadius}\n          dataSAId={dataSAId}\n        />\n      </div>\n      <FieldError errorText={errorText} />\n    </div>\n  );\n}\n","import { DetailedHTMLProps, FC, FocusEventHandler, ReactNode, TextareaHTMLAttributes, useId, useState } from 'react';\nimport { clsx } from '../../utils/clsx';\nimport { FieldError } from './FieldError';\nimport { textareaStyles } from './textarea.css';\n\ntype Props = {\n  label: string;\n  errorText?: ReactNode;\n  border?: 'black' | 'grey';\n  bRadius?: 8 | 10;\n  containerClassName?: string;\n  dataSAId?: string;\n} & DetailedHTMLProps<TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement>;\n\nexport const TextArea: FC<Props> = ({\n  errorText,\n  className,\n  label,\n  onFocus,\n  onBlur,\n  disabled = false,\n  value,\n  border,\n  bRadius,\n  containerClassName,\n  dataSAId,\n  ...rest\n}) => {\n  const [labelS, setLabelS] = useState<'simple' | 'focused'>(value ? 'focused' : 'simple');\n  const id = useId();\n\n  const handleFocus: FocusEventHandler<HTMLTextAreaElement> = e => {\n    setLabelS('focused');\n    onFocus?.(e);\n  };\n  const handleBlur: FocusEventHandler<HTMLTextAreaElement> = e => {\n    if (!value) {\n      setLabelS('simple');\n    }\n    onBlur?.(e);\n  };\n\n  return (\n    <div className={className}>\n      <div\n        className={clsx(\n          textareaStyles.containerStyle({ disabled, error: !!errorText, border, bRadius }),\n          containerClassName,\n        )}\n        data-sa-id={dataSAId}\n      >\n        <label htmlFor={id} className={textareaStyles.labelStyle({ variant: labelS, disabled })}>\n          {label}\n        </label>\n        <textarea\n          className={textareaStyles.inputStyle({ disabled, variant: labelS })}\n          onFocus={handleFocus}\n          onBlur={handleBlur}\n          disabled={disabled}\n          value={value}\n          {...rest}\n          id={id}\n        />\n      </div>\n      <FieldError errorText={errorText} />\n    </div>\n  );\n};\n","import { DetailedHTMLProps, FC, FocusEventHandler, InputHTMLAttributes, ReactNode, RefObject, useId, useState } from 'react';\nimport { clsx } from '../../utils/clsx';\nimport { FieldError } from './FieldError';\nimport { containerStyle, fieldEndAdornment, fieldEndIcon, fieldWrap, inputStyle, labelStyle } from './textfield.css';\n\ntype Props = {\n  label: string;\n  errorText?: ReactNode;\n  border?: 'black' | 'grey';\n  endAdornment?: ReactNode;\n  endIcon?: ReactNode;\n  bRadius?: 8 | 10;\n  containerClassName?: string;\n  inputRef?: RefObject<HTMLInputElement>;\n  dataSAId?: string;\n} & DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\n\nexport const TextField: FC<Props> = ({\n  errorText,\n  className,\n  label,\n  onFocus,\n  onBlur,\n  disabled = false,\n  value,\n  border,\n  endAdornment,\n  endIcon,\n  bRadius,\n  containerClassName,\n  inputRef,\n  dataSAId,\n  ...rest\n}) => {\n  const [labelS, setLabelS] = useState<'simple' | 'focused'>(value ? 'focused' : 'simple');\n  const id = useId();\n\n  const handleFocus: FocusEventHandler<HTMLInputElement> = e => {\n    setLabelS('focused');\n    onFocus?.(e);\n  };\n  const handleBlur: FocusEventHandler<HTMLInputElement> = e => {\n    if (!value) {\n      setLabelS('simple');\n    }\n    onBlur?.(e);\n  };\n\n  return (\n    <div className={className}>\n      <div\n        className={clsx(\n          containerStyle({ disabled, error: !!errorText, border, withEndAdornment: !!endAdornment, bRadius }),\n          containerClassName,\n        )}\n        data-sa-id={dataSAId}\n      >\n        <div className={fieldWrap}>\n          <label htmlFor={id} className={labelStyle({ variant: labelS, disabled })}>\n            {label}\n          </label>\n          <input\n            className={inputStyle({ disabled, variant: labelS, withIcon: !!endIcon, bRadius })}\n            onFocus={handleFocus}\n            onBlur={handleBlur}\n            disabled={disabled}\n            value={value}\n            ref={inputRef}\n            {...rest}\n            id={id}\n          />\n        </div>\n        {endAdornment ? <div className={fieldEndAdornment}>{endAdornment}</div> : null}\n        {endIcon ? <div className={fieldEndIcon}>{endIcon}</div> : null}\n      </div>\n      <FieldError errorText={errorText} />\n    </div>\n  );\n};\n"],"names":["CheckboxButton","forwardRef","checked","onChangeHandler","disabled","dataSAId","ref","handleChange","useCallback","e","_jsxs","checkboxStyles","input","rest","containerIcons","svgRound","_jsx","FieldError","memo","errorText","Paragraph","fieldErrorStyle","CheckboxField","className","label","onChange","border","bRadius","containerClassName","id","useId","useRef","c","onClickHandler","clsx","variant","checkStyles","inputProps","RadioButton","radioBtnStyles","RadioField","radioStyles","radioProps","Select","onChangeSelect","selectedOptionLabel","options","selectedOption","fullWidth","isOpen","setOpen","useState","mainRef","toggle","close","useEventListener","useClickOutside","selectItem","optionValue","valueForSelect","select","selectStyles","ArrowUpSline","iconStyle","DropDownMenu","TextArea","onFocus","onBlur","value","labelS","setLabelS","handleFocus","handleBlur","textareaStyles","TextField","endAdornment","endIcon","inputRef","containerStyle","fieldWrap","inputStyle","fieldEndAdornment","fieldEndIcon"],"mappings":"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"}