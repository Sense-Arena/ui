{"version":3,"file":"TextField.9242fec7.js","sources":["../../src/components/checkbox-button/CheckboxButton.tsx","../../src/components/inputs/FieldError.tsx","../../src/components/inputs/CheckboxField.tsx","../../src/components/radio-button/RadioButton.tsx","../../src/components/inputs/RadioField.tsx","../../src/components/inputs/Select.tsx","../../src/components/inputs/TextArea.tsx","../../src/components/inputs/TextField.tsx"],"sourcesContent":["import { ChangeEvent, DetailedHTMLProps, forwardRef, InputHTMLAttributes, useCallback } from 'react';\nimport { checkboxStyles } from './checkbox.css';\ntype Props = {\n  disabled?: boolean;\n  checked: boolean;\n  onChangeHandler: (checked: boolean) => void;\n} & DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\n\nexport const CheckboxButton = forwardRef<HTMLInputElement, Props>(({ checked, onChangeHandler, disabled, ...rest }, ref) => {\n  const handleChange = useCallback(\n    (e: ChangeEvent<HTMLInputElement>) => {\n      onChangeHandler(e.target.checked);\n    },\n    [onChangeHandler],\n  );\n\n  return (\n    <span className={checkboxStyles.container({ checked, disabled })}>\n      <input\n        type=\"checkbox\"\n        className={checkboxStyles.input}\n        {...rest}\n        ref={ref}\n        onChange={handleChange}\n        checked={checked}\n      />\n      <span className={checkboxStyles.containerIcons}>\n        <svg className={checkboxStyles.svgRound} focusable=\"false\" viewBox=\"0 0 24 24\">\n          <path d=\"M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z\"></path>\n        </svg>\n        <svg className={checkboxStyles.svgInside({ checked })} focusable=\"false\" viewBox=\"0 0 24 24\">\n          <path d=\"M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\"></path>{' '}\n        </svg>\n      </span>\n    </span>\n  );\n});\n","import { memo, ReactNode } from 'react';\nimport { Paragraph } from '../typography';\nimport { fieldErrorStyle } from './error.css';\n\nexport const FieldError = memo<{ errorText?: ReactNode }>(({ errorText }) => {\n  if (!errorText) return null;\n\n  return (\n    <Paragraph variant=\"note\" className={fieldErrorStyle}>\n      {errorText}\n    </Paragraph>\n  );\n});\n","import { DetailedHTMLProps, FC, InputHTMLAttributes, MouseEvent, ReactNode, useCallback, useId, useRef } from 'react';\nimport { clsx } from '../../utils/clsx';\nimport { CheckboxButton } from '../checkbox-button/CheckboxButton';\nimport { checkStyles } from './check.css';\nimport { FieldError } from './FieldError';\n\ntype Props = {\n  label: ReactNode;\n  errorText?: ReactNode;\n  className?: string;\n  disabled?: boolean;\n  checked?: boolean;\n  inputProps?: DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\n  onChange?: (checked: boolean) => void;\n  border?: 'black' | 'grey';\n  bRadius?: 8 | 10;\n  containerClassName?: string;\n  variant?: 'field' | 'row';\n  dataSAId?: string;\n};\n\nexport const CheckboxField: FC<Props> = ({\n  errorText,\n  className,\n  label,\n  disabled = false,\n  checked,\n  inputProps = {},\n  onChange,\n  border,\n  bRadius,\n  containerClassName,\n  variant = 'field',\n  dataSAId,\n}) => {\n  const id = useId();\n  const ref = useRef<HTMLInputElement | null>(null);\n\n  const onChangeHandler = useCallback(\n    (c: boolean) => {\n      if (disabled) return;\n      onChange?.(c);\n    },\n    [onChange, disabled],\n  );\n  const onClickHandler = useCallback(\n    (e: MouseEvent<HTMLDivElement, globalThis.MouseEvent>) => {\n      e.preventDefault();\n      if (disabled) return;\n      onChangeHandler(!checked);\n      if (ref.current) {\n        ref.current.checked = !checked;\n      }\n    },\n    [onChangeHandler, disabled],\n  );\n\n  return (\n    <div className={className}>\n      <div\n        className={clsx(\n          variant === 'field'\n            ? checkStyles.containerStyle({ disabled, error: !!errorText, border, bRadius })\n            : checkStyles.containerRow({\n                disabled,\n              }),\n          containerClassName,\n        )}\n        onClick={onClickHandler}\n        data-sa-id={dataSAId}\n      >\n        <CheckboxButton\n          id={id}\n          checked={!!checked}\n          onChangeHandler={onChangeHandler}\n          disabled={disabled}\n          {...inputProps}\n          ref={ref}\n        />\n        <label htmlFor={id} className={checkStyles.labelStyle({ disabled })}>\n          {label}\n        </label>\n      </div>\n      <FieldError errorText={errorText} />\n    </div>\n  );\n};\n","import { ChangeEvent, DetailedHTMLProps, forwardRef, InputHTMLAttributes, useCallback } from 'react';\nimport { radioBtnStyles } from './radio.css';\n\ntype Props = {\n  disabled?: boolean;\n  checked: boolean;\n  onChangeHandler: (checked: boolean) => void;\n} & DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\n\nexport const RadioButton = forwardRef<HTMLInputElement, Props>(({ checked, onChangeHandler, disabled, ...rest }, ref) => {\n  const handleChange = useCallback(\n    (e: ChangeEvent<HTMLInputElement>) => {\n      onChangeHandler(e.target.checked);\n    },\n    [onChangeHandler],\n  );\n\n  return (\n    <span className={radioBtnStyles.container({ checked, disabled })}>\n      <input type=\"radio\" className={radioBtnStyles.input} {...rest} ref={ref} onChange={handleChange} checked={checked} />\n      <span className={radioBtnStyles.containerIcons}>\n        <svg className={radioBtnStyles.svgRound} focusable=\"false\" viewBox=\"0 0 24 24\">\n          <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z\"></path>\n        </svg>\n        <svg className={radioBtnStyles.svgInside({ checked })} focusable=\"false\" viewBox=\"0 0 24 24\">\n          <path d=\"M8.465 8.465C9.37 7.56 10.62 7 12 7C14.76 7 17 9.24 17 12C17 13.38 16.44 14.63 15.535 15.535C14.63 16.44 13.38 17 12 17C9.24 17 7 14.76 7 12C7 10.62 7.56 9.37 8.465 8.465Z\"></path>\n        </svg>\n      </span>\n    </span>\n  );\n});\n","import { DetailedHTMLProps, FC, InputHTMLAttributes, ReactNode, useCallback, useId, useRef } from 'react';\nimport { clsx } from '../../utils/clsx';\nimport { RadioButton } from '../radio-button/RadioButton';\nimport { FieldError } from './FieldError';\nimport { radioStyles } from './radio.css';\n\ntype Props = {\n  label: ReactNode;\n  errorText?: ReactNode;\n  className?: string;\n  disabled?: boolean;\n  checked?: boolean;\n  radioProps?: DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\n  onChange?: (checked: boolean) => void;\n  border?: 'black' | 'grey';\n  bRadius?: 8 | 10;\n  containerClassName?: string;\n  dataSAId?: string;\n};\n\nexport const RadioField: FC<Props> = ({\n  errorText,\n  className,\n  label,\n  disabled = false,\n  checked,\n  radioProps = {},\n  onChange,\n  border,\n  bRadius,\n  containerClassName,\n  dataSAId,\n}) => {\n  const id = useId();\n  const ref = useRef<HTMLInputElement | null>(null);\n\n  const onChangeHandler = useCallback(\n    (c: boolean) => {\n      if (disabled) return;\n      onChange?.(!c);\n    },\n    [onChange, disabled],\n  );\n  const onClickHandler = useCallback(() => {\n    if (disabled) return;\n    onChange?.(true);\n    if (ref.current) {\n      ref.current.checked = true;\n    }\n  }, [onChange, disabled]);\n\n  return (\n    <div className={className}>\n      <div\n        className={clsx(radioStyles.containerStyle({ disabled, error: !!errorText, border, bRadius }), containerClassName)}\n        onClick={onClickHandler}\n        data-sa-id={dataSAId}\n      >\n        <RadioButton\n          id={id}\n          checked={!!checked}\n          onChangeHandler={onChangeHandler}\n          disabled={disabled}\n          {...radioProps}\n          ref={ref}\n        />\n        <label htmlFor={id} className={radioStyles.labelStyle({ disabled })}>\n          {label}\n        </label>\n      </div>\n      <FieldError errorText={errorText} />\n    </div>\n  );\n};\n","import { DetailedHTMLProps, ReactNode, SelectHTMLAttributes, useCallback, useRef, useState } from 'react';\nimport { useClickOutside } from '../../hooks/useClickOutside';\nimport { useEventListener } from '../../hooks/useEventListener';\nimport { ArrowDownSline, ArrowUpSline } from '../../icons';\nimport { clsx } from '../../utils/clsx';\nimport { DropDownMenu } from '../dropdown-menu';\nimport { FieldError } from './FieldError';\nimport { selectStyles } from './select.css';\n\ntype Props<TOption> = {\n  disabled?: boolean;\n  errorText?: ReactNode;\n  onChangeSelect?: (selected: TOption, name?: string) => void;\n  selectedOptionLabel: string;\n  selectedOption: TOption;\n  options: {\n    title: string;\n    value: TOption;\n  }[];\n  className?: string;\n  border?: 'black' | 'grey';\n  fullWidth?: boolean;\n  bRadius?: 8 | 10;\n  label?: string;\n  containerClassName?: string;\n} & DetailedHTMLProps<SelectHTMLAttributes<HTMLSelectElement>, HTMLSelectElement>;\n\nexport function Select<TOption>({\n  disabled,\n  onChangeSelect,\n  selectedOptionLabel,\n  containerClassName,\n  options,\n  errorText,\n  className,\n  selectedOption,\n  border,\n  fullWidth,\n  bRadius,\n  label,\n  ...rest\n}: Props<TOption>) {\n  const [isOpen, setOpen] = useState(false);\n\n  const ref = useRef<HTMLDivElement>(null);\n  const mainRef = useRef<HTMLDivElement>(null);\n\n  const toggle = useCallback(() => {\n    if (disabled) return;\n    setOpen(v => !v);\n  }, [disabled]);\n  const close = useCallback(() => setOpen(false), []);\n  useEventListener('keyup', close, 'Escape');\n  useClickOutside(ref, close, mainRef);\n\n  const selectItem = useCallback(\n    (optionValue: TOption) => {\n      onChangeSelect?.(optionValue, rest.name);\n      close();\n    },\n    [onChangeSelect],\n  );\n\n  const valueForSelect =\n    typeof selectedOption === 'number' || typeof selectedOption === 'string' ? selectedOption : String(selectedOption);\n\n  return (\n    <div className={className}>\n      <select disabled value={valueForSelect} className={selectStyles.select} {...rest}>\n        <option value={valueForSelect}>{selectedOptionLabel}</option>\n      </select>\n      <div\n        onClick={toggle}\n        className={clsx(\n          selectStyles.container({ disabled, error: !!errorText, opened: isOpen, border, fullWidth, bRadius }),\n          containerClassName,\n        )}\n        ref={mainRef}\n      >\n        {label ? <span className={selectStyles.label}>{label}</span> : null}\n        <span className={selectStyles.text({ withLabel: !!label })}>{selectedOptionLabel}</span>\n        <div>\n          {isOpen ? (\n            <ArrowUpSline className={selectStyles.iconStyle} />\n          ) : (\n            <ArrowDownSline className={selectStyles.iconStyle} />\n          )}\n        </div>\n        <DropDownMenu\n          menuRef={ref}\n          isOpen={isOpen}\n          mainRef={mainRef}\n          selectedOption={selectedOption}\n          selectItem={selectItem}\n          options={options}\n          size=\"l\"\n          bRadius={bRadius}\n        />\n      </div>\n      <FieldError errorText={errorText} />\n    </div>\n  );\n}\n","import { DetailedHTMLProps, FC, FocusEventHandler, ReactNode, TextareaHTMLAttributes, useId, useState } from 'react';\nimport { clsx } from '../../utils/clsx';\nimport { FieldError } from './FieldError';\nimport { textareaStyles } from './textarea.css';\n\ntype Props = {\n  label: string;\n  errorText?: ReactNode;\n  border?: 'black' | 'grey';\n  bRadius?: 8 | 10;\n  containerClassName?: string;\n  dataSAId?: string;\n} & DetailedHTMLProps<TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement>;\n\nexport const TextArea: FC<Props> = ({\n  errorText,\n  className,\n  label,\n  onFocus,\n  onBlur,\n  disabled = false,\n  value,\n  border,\n  bRadius,\n  containerClassName,\n  dataSAId,\n  ...rest\n}) => {\n  const [labelS, setLabelS] = useState<'simple' | 'focused'>(value ? 'focused' : 'simple');\n  const id = useId();\n\n  const handleFocus: FocusEventHandler<HTMLTextAreaElement> = e => {\n    setLabelS('focused');\n    onFocus?.(e);\n  };\n  const handleBlur: FocusEventHandler<HTMLTextAreaElement> = e => {\n    if (!value) {\n      setLabelS('simple');\n    }\n    onBlur?.(e);\n  };\n\n  return (\n    <div className={className}>\n      <div\n        className={clsx(\n          textareaStyles.containerStyle({ disabled, error: !!errorText, border, bRadius }),\n          containerClassName,\n        )}\n        data-sa-id={dataSAId}\n      >\n        <label htmlFor={id} className={textareaStyles.labelStyle({ variant: labelS, disabled })}>\n          {label}\n        </label>\n        <textarea\n          className={textareaStyles.inputStyle({ disabled, variant: labelS })}\n          onFocus={handleFocus}\n          onBlur={handleBlur}\n          disabled={disabled}\n          value={value}\n          {...rest}\n          id={id}\n        />\n      </div>\n      <FieldError errorText={errorText} />\n    </div>\n  );\n};\n","import { DetailedHTMLProps, FC, FocusEventHandler, InputHTMLAttributes, ReactNode, RefObject, useId, useState } from 'react';\nimport { clsx } from '../../utils/clsx';\nimport { FieldError } from './FieldError';\nimport { containerStyle, fieldEndAdornment, fieldEndIcon, fieldWrap, inputStyle, labelStyle } from './textfield.css';\n\ntype Props = {\n  label: string;\n  errorText?: ReactNode;\n  border?: 'black' | 'grey';\n  endAdornment?: ReactNode;\n  endIcon?: ReactNode;\n  bRadius?: 8 | 10;\n  containerClassName?: string;\n  inputRef?: RefObject<HTMLInputElement>;\n  dataSAId?: string;\n} & DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\n\nexport const TextField: FC<Props> = ({\n  errorText,\n  className,\n  label,\n  onFocus,\n  onBlur,\n  disabled = false,\n  value,\n  border,\n  endAdornment,\n  endIcon,\n  bRadius,\n  containerClassName,\n  inputRef,\n  dataSAId,\n  ...rest\n}) => {\n  const [labelS, setLabelS] = useState<'simple' | 'focused'>(value ? 'focused' : 'simple');\n  const id = useId();\n\n  const handleFocus: FocusEventHandler<HTMLInputElement> = e => {\n    setLabelS('focused');\n    onFocus?.(e);\n  };\n  const handleBlur: FocusEventHandler<HTMLInputElement> = e => {\n    if (!value) {\n      setLabelS('simple');\n    }\n    onBlur?.(e);\n  };\n\n  return (\n    <div className={className}>\n      <div\n        className={clsx(\n          containerStyle({ disabled, error: !!errorText, border, withEndAdornment: !!endAdornment, bRadius }),\n          containerClassName,\n        )}\n        data-sa-id={dataSAId}\n      >\n        <div className={fieldWrap}>\n          <label htmlFor={id} className={labelStyle({ variant: labelS, disabled })}>\n            {label}\n          </label>\n          <input\n            className={inputStyle({ disabled, variant: labelS, withIcon: !!endIcon, bRadius })}\n            onFocus={handleFocus}\n            onBlur={handleBlur}\n            disabled={disabled}\n            value={value}\n            ref={inputRef}\n            {...rest}\n            id={id}\n          />\n        </div>\n        {endAdornment ? <div className={fieldEndAdornment}>{endAdornment}</div> : null}\n        {endIcon ? <div className={fieldEndIcon}>{endIcon}</div> : null}\n      </div>\n      <FieldError errorText={errorText} />\n    </div>\n  );\n};\n"],"names":["CheckboxButton","forwardRef","checked","onChangeHandler","disabled","ref","handleChange","useCallback","e","_jsxs","checkboxStyles","_jsx","input","rest","containerIcons","svgRound","FieldError","memo","errorText","Paragraph","fieldErrorStyle","CheckboxField","className","label","onChange","border","bRadius","containerClassName","dataSAId","id","useId","useRef","c","onClickHandler","clsx","variant","checkStyles","inputProps","RadioButton","radioBtnStyles","RadioField","radioStyles","radioProps","Select","onChangeSelect","selectedOptionLabel","options","selectedOption","fullWidth","isOpen","setOpen","useState","mainRef","toggle","close","useEventListener","useClickOutside","selectItem","optionValue","valueForSelect","select","selectStyles","ArrowUpSline","iconStyle","DropDownMenu","TextArea","onFocus","onBlur","value","labelS","setLabelS","handleFocus","handleBlur","textareaStyles","TextField","endAdornment","endIcon","inputRef","containerStyle","fieldWrap","inputStyle","fieldEndAdornment","fieldEndIcon"],"mappings":"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"}