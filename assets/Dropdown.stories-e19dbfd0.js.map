{"version":3,"file":"Dropdown.stories-e19dbfd0.js","sources":["../../src/components/dropdown/Dropdown.tsx"],"sourcesContent":["import { ReactNode, useCallback, useRef, useState } from 'react';\nimport { useClickOutside } from '../../hooks/useClickOutside';\nimport { useEventListener } from '../../hooks/useEventListener';\nimport { ArrowDownSline, ArrowUpSline } from '../../icons';\nimport { clsx } from '../../utils/clsx';\nimport { DropDownMenu } from '../dropdown-menu';\nimport { ddContainerStyle, ddIconStyle, ddText } from './dropdown.css';\n\ntype Props<TOption> = {\n  disabled?: boolean;\n  error?: boolean;\n  onSelect?: (selected: TOption) => void;\n  selectedOptionLabel: ReactNode;\n  selectedOption: TOption;\n  options: {\n    title: string;\n    value: TOption;\n  }[];\n  className?: string;\n  border?: 'black' | 'grey';\n  fullWidth?: boolean;\n  size?: 's' | 'm' | 'l';\n  bRadius?: 8 | 10;\n  dataSAId?: string;\n};\n\nexport function Dropdown<TOption>({\n  disabled,\n  onSelect,\n  selectedOptionLabel,\n  options,\n  error,\n  className,\n  selectedOption,\n  border,\n  fullWidth,\n  size,\n  bRadius,\n  dataSAId,\n}: Props<TOption>) {\n  const [isOpen, setOpen] = useState(false);\n\n  const ref = useRef<HTMLDivElement>(null);\n  const mainRef = useRef<HTMLDivElement>(null);\n\n  const toggle = useCallback(() => {\n    if (disabled) return;\n    setOpen(v => !v);\n  }, [disabled]);\n  const close = useCallback(() => setOpen(false), []);\n  useEventListener('keyup', close, 'Escape');\n  useClickOutside(ref, close, mainRef);\n\n  const selectItem = useCallback(\n    (optionValue: TOption) => {\n      onSelect?.(optionValue);\n      close();\n    },\n    [onSelect],\n  );\n\n  return (\n    <div\n      onClick={toggle}\n      className={clsx(ddContainerStyle({ disabled, error, opened: isOpen, border, fullWidth, size, bRadius }), className)}\n      ref={mainRef}\n      data-sa-id={dataSAId}\n    >\n      <span className={ddText}>{selectedOptionLabel}</span>\n      <div>{isOpen ? <ArrowUpSline className={ddIconStyle} /> : <ArrowDownSline className={ddIconStyle} />}</div>\n      <DropDownMenu\n        menuRef={ref}\n        isOpen={isOpen}\n        mainRef={mainRef}\n        selectedOption={selectedOption}\n        selectItem={selectItem}\n        options={options}\n        size={size}\n        bRadius={bRadius}\n        dataSAId={dataSAId}\n      />\n    </div>\n  );\n}\n"],"names":["Dropdown","disabled","onSelect","selectedOptionLabel","options","error","className","selectedOption","border","fullWidth","size","bRadius","isOpen","setOpen","useState","ref","useRef","mainRef","toggle","useCallback","close","useEventListener","useClickOutside","selectItem","optionValue","_jsxs","dataSAId","ddText","_jsx","ArrowUpSline","ddIconStyle","DropDownMenu"],"mappings":"o3BA0BO,SAAAA,EAAA,CAA2B,SAAAC,EAChCA,SAAAA,EACAC,oBAAAA,EACAC,QAAAA,EACAC,MAAAA,EACAC,UAAAA,EACAC,eAAAA,EACAC,OAAAA,EACAC,UAAAA,EACAC,KAAAA,EACAC,QAAAA,EACAC,SAAAA,CAEc,EAAA,CACd,KAAA,CAAAC,EAAAC,CAAA,EAAAC,EAAA,QAAA,SAAA,EAAA,EAEAC,EAAAC,iBAAA,IAAA,EACAC,EAAAD,iBAAA,IAAA,EAEAE,EAAAC,EAAAA,QAAAA,YAAA,IAAA,CACElB,GACAY,EAAAA,GAAAA,CAAAA,CAAAA,CAAe,EAAA,CAAAZ,CAAA,CAAA,EAEjBmB,EAAAD,EAAAA,QAAAA,YAAA,IAAAN,EAAA,EAAA,EAAA,CAAA,CAAA,EACAQ,EAAAA,QAAAA,EAAAA,QAAAA,EACAC,EAAAA,EAAAA,EAAAA,CAAAA,EAEA,MAAAC,EAAAJ,sBAAAK,GAAA,CAEItB,GAAAA,MAAAA,EAAAA,GACAkB,GAAO,EAAA,CAAAlB,CAAA,CAAA,EAKX,OAAAuB,EAAA,MAAA,CACE,QAAAP,EACWA,UAAAA,EAAAA,EAAAA,CACwB,SAAAjB,EAAEA,MAAAA,EAAUI,OAAAA,EAAeO,OAAAA,EAAQJ,UAAAA,EAAQC,KAAAA,EAAWC,QAAAA,CAAMC,CAAAA,EAAAA,CAAAA,EAAqB,IAAAM,EAC7GA,aAAAA,EACOS,SAAAA,CAAAA,EAAAA,OAAAA,CAEZ,UAAAC,EAAiBA,SAAAA,CAASxB,CAAAA,EAAAA,EAAAA,MAAAA,CAC1B,SAAAS,EAAAgB,EAAAC,EAAA,CAA4B,UAAAC,CAAYA,CAAAA,EAAAA,EAAAA,EAAAA,CAAiC,UAAAA,CAAYA,CAAAA,CAAY,CAAA,EAAAF,EAAAG,EAAA,CACpF,QAAAhB,EACFA,OAAAA,EACT,QAAAE,EACA,eAAAV,EACA,WAAAgB,EACA,QAAAnB,EACA,KAAAM,EACA,QAAAC,EACA,SAAAe,CACA,CAAA,CAAA,CACA,CAAA,CAGR;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}