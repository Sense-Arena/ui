{"version":3,"file":"Select.333c20ce.js","sources":["../../src/components/radio-button/RadioButton.tsx","../../src/components/inputs/RadioField.tsx","../../src/components/inputs/TextArea.tsx","../../src/components/inputs/TextField.tsx","../../src/components/inputs/Select.tsx"],"sourcesContent":["import { ChangeEvent, DetailedHTMLProps, forwardRef, InputHTMLAttributes, useCallback } from 'react';\nimport { radioBtnStyles } from './radio.css';\n\ntype Props = {\n  disabled?: boolean;\n  checked: boolean;\n  onChangeHandler: (checked: boolean) => void;\n} & DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\n\nexport const RadioButton = forwardRef<HTMLInputElement, Props>(({ checked, onChangeHandler, disabled, ...rest }, ref) => {\n  const handleChange = useCallback(\n    (e: ChangeEvent<HTMLInputElement>) => {\n      onChangeHandler(e.target.checked);\n    },\n    [onChangeHandler],\n  );\n\n  return (\n    <span className={radioBtnStyles.container({ checked, disabled })}>\n      <input type=\"radio\" className={radioBtnStyles.input} {...rest} ref={ref} onChange={handleChange} checked={checked} />\n      <span className={radioBtnStyles.containerIcons}>\n        <svg className={radioBtnStyles.svgRound} focusable=\"false\" viewBox=\"0 0 24 24\">\n          <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z\"></path>\n        </svg>\n        <svg className={radioBtnStyles.svgInside({ checked })} focusable=\"false\" viewBox=\"0 0 24 24\">\n          <path d=\"M8.465 8.465C9.37 7.56 10.62 7 12 7C14.76 7 17 9.24 17 12C17 13.38 16.44 14.63 15.535 15.535C14.63 16.44 13.38 17 12 17C9.24 17 7 14.76 7 12C7 10.62 7.56 9.37 8.465 8.465Z\"></path>\n        </svg>\n      </span>\n    </span>\n  );\n});\n","import { DetailedHTMLProps, FC, InputHTMLAttributes, ReactNode, useId, useRef } from 'react';\nimport { clsx } from '../../utils/clsx';\nimport { RadioButton } from '../radio-button/RadioButton';\nimport { Paragraph } from '../typography';\nimport { radioStyles } from './radio.css';\n\ntype Props = {\n  label: ReactNode;\n  errorText?: string;\n  className?: string;\n  disabled?: boolean;\n  checked?: boolean;\n  radioProps?: DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\n  onChange?: (checked: boolean) => void;\n  border?: 'black' | 'grey';\n  bRadius?: 8 | 10;\n};\n\nexport const RadioField: FC<Props> = ({\n  errorText,\n  className,\n  label,\n  disabled = false,\n  checked,\n  radioProps = {},\n  onChange,\n  border,\n  bRadius,\n}) => {\n  const id = useId();\n  const ref = useRef<HTMLInputElement | null>(null);\n\n  const onChangeHandler = (checked: boolean) => {\n    onChange?.(!checked);\n  };\n\n  return (\n    <div>\n      <div\n        className={clsx(radioStyles.containerStyle({ disabled, error: !!errorText, border, bRadius }), className)}\n        onClick={() => {\n          onChange?.(true);\n\n          if (ref.current) {\n            ref.current.checked = true;\n          }\n        }}\n      >\n        <RadioButton id={id} checked={!!checked} onChangeHandler={onChangeHandler} disabled={disabled} ref={ref} />\n        <label htmlFor={id} className={radioStyles.labelStyle({ disabled })}>\n          {label}\n        </label>\n      </div>\n      {errorText ? (\n        <Paragraph variant=\"note\" className={radioStyles.errorHintStyle}>\n          {errorText}\n        </Paragraph>\n      ) : null}\n    </div>\n  );\n};\n","import { DetailedHTMLProps, FC, FocusEventHandler, TextareaHTMLAttributes, useId, useState } from 'react';\nimport { clsx } from '../../utils/clsx';\nimport { Paragraph } from '../typography';\nimport { textareaStyles } from './textarea.css';\n\ntype Props = {\n  label: string;\n  errorText?: string;\n  border?: 'black' | 'grey';\n  bRadius?: 8 | 10;\n} & DetailedHTMLProps<TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement>;\n\nexport const TextArea: FC<Props> = ({\n  errorText,\n  className,\n  label,\n  onFocus,\n  onBlur,\n  disabled = false,\n  value,\n  border,\n  bRadius,\n  ...rest\n}) => {\n  const [labelS, setLabelS] = useState<'simple' | 'focused'>(value ? 'focused' : 'simple');\n  const id = useId();\n\n  const handleFocus: FocusEventHandler<HTMLTextAreaElement> = e => {\n    setLabelS('focused');\n    onFocus?.(e);\n  };\n  const handleBlur: FocusEventHandler<HTMLTextAreaElement> = e => {\n    if (!value) {\n      setLabelS('simple');\n    }\n    onBlur?.(e);\n  };\n\n  return (\n    <div>\n      <div className={clsx(textareaStyles.containerStyle({ disabled, error: !!errorText, border, bRadius }), className)}>\n        <label htmlFor={id} className={textareaStyles.labelStyle({ variant: labelS, disabled })}>\n          {label}\n        </label>\n        <textarea\n          className={textareaStyles.inputStyle({ disabled, variant: labelS })}\n          onFocus={handleFocus}\n          onBlur={handleBlur}\n          disabled={disabled}\n          value={value}\n          {...rest}\n          id={id}\n        />\n      </div>\n      {errorText ? (\n        <Paragraph variant=\"note\" className={textareaStyles.errorHintStyle}>\n          {errorText}\n        </Paragraph>\n      ) : null}\n    </div>\n  );\n};\n","import { DetailedHTMLProps, FC, FocusEventHandler, InputHTMLAttributes, ReactNode, useId, useState } from 'react';\nimport { clsx } from '../../utils/clsx';\nimport { Paragraph } from '../typography';\nimport {\n  containerStyle,\n  errorHintStyle,\n  fieldEndAdornment,\n  fieldEndIcon,\n  fieldWrap,\n  inputStyle,\n  labelStyle,\n} from './textfield.css';\n\ntype Props = {\n  label: string;\n  errorText?: string;\n  border?: 'black' | 'grey';\n  endAdornment?: ReactNode;\n  endIcon?: ReactNode;\n  bRadius?: 8 | 10;\n} & DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\n\nexport const TextField: FC<Props> = ({\n  errorText,\n  className,\n  label,\n  onFocus,\n  onBlur,\n  disabled = false,\n  value,\n  border,\n  endAdornment,\n  endIcon,\n  bRadius,\n  ...rest\n}) => {\n  const [labelS, setLabelS] = useState<'simple' | 'focused'>(value ? 'focused' : 'simple');\n  const id = useId();\n\n  const handleFocus: FocusEventHandler<HTMLInputElement> = e => {\n    setLabelS('focused');\n    onFocus?.(e);\n  };\n  const handleBlur: FocusEventHandler<HTMLInputElement> = e => {\n    if (!value) {\n      setLabelS('simple');\n    }\n    onBlur?.(e);\n  };\n\n  return (\n    <div>\n      <div\n        className={clsx(\n          containerStyle({ disabled, error: !!errorText, border, withEndAdornment: !!endAdornment, bRadius }),\n          className,\n        )}\n      >\n        <div className={fieldWrap}>\n          <label htmlFor={id} className={labelStyle({ variant: labelS, disabled })}>\n            {label}\n          </label>\n          <input\n            className={inputStyle({ disabled, variant: labelS, withIcon: !!endIcon })}\n            onFocus={handleFocus}\n            onBlur={handleBlur}\n            disabled={disabled}\n            value={value}\n            {...rest}\n            id={id}\n          />\n        </div>\n        {endAdornment ? <div className={fieldEndAdornment}>{endAdornment}</div> : null}\n        {endIcon ? <div className={fieldEndIcon}>{endIcon}</div> : null}\n      </div>\n      {errorText ? (\n        <Paragraph variant=\"note\" className={errorHintStyle}>\n          {errorText}\n        </Paragraph>\n      ) : null}\n    </div>\n  );\n};\n","import { DetailedHTMLProps, SelectHTMLAttributes, useCallback, useRef, useState } from 'react';\nimport { useClickOutside } from '../../hooks/useClickOutside';\nimport { useEventListener } from '../../hooks/useEventListener';\nimport { ArrowDownSline, ArrowUpSline } from '../../icons';\nimport { clsx } from '../../utils/clsx';\nimport { selectStyles } from './select.css';\nimport { DropDownMenu } from '../dropdown-menu';\n\ntype Props<TOption> = {\n  disabled?: boolean;\n  error?: boolean;\n  onSelect?: (selected: TOption) => void;\n  selectedOptionLabel: string;\n  selectedOption: TOption;\n  options: {\n    title: string;\n    value: TOption;\n  }[];\n  className?: string;\n  border?: 'black' | 'grey';\n  fullWidth?: boolean;\n  bRadius?: 8 | 10;\n  label?: string;\n} & DetailedHTMLProps<SelectHTMLAttributes<HTMLSelectElement>, HTMLSelectElement>;\n\nexport function Select<TOption>({\n  disabled,\n  onSelect,\n  selectedOptionLabel,\n  options,\n  error,\n  className,\n  selectedOption,\n  border,\n  fullWidth,\n  bRadius,\n  label,\n  ...rest\n}: Props<TOption>) {\n  const [isOpen, setOpen] = useState(false);\n\n  const ref = useRef<HTMLDivElement>(null);\n  const mainRef = useRef<HTMLDivElement>(null);\n\n  const toggle = useCallback(() => {\n    if (disabled) return;\n    setOpen(v => !v);\n  }, [disabled]);\n  const close = useCallback(() => setOpen(false), []);\n  useEventListener('keyup', close, 'Escape');\n  useClickOutside(ref, close, mainRef);\n\n  const selectItem = useCallback(\n    (optionValue: TOption) => {\n      onSelect?.(optionValue);\n      close();\n    },\n    [onSelect],\n  );\n\n  const valueForSelect =\n    typeof selectedOption === 'number' || typeof selectedOption === 'string' ? selectedOption : String(selectedOption);\n\n  return (\n    <>\n      <select disabled value={valueForSelect} className={selectStyles.select} {...rest}>\n        <option value={valueForSelect}>{selectedOptionLabel}</option>\n      </select>\n      <div\n        onClick={toggle}\n        className={clsx(selectStyles.container({ disabled, error, opened: isOpen, border, fullWidth, bRadius }), className)}\n        ref={mainRef}\n      >\n        {label ? <span className={selectStyles.label}>{label}</span> : null}\n        <span className={selectStyles.text({ withLabel: !!label })}>{selectedOptionLabel}</span>\n        <div>\n          {isOpen ? (\n            <ArrowUpSline className={selectStyles.iconStyle} />\n          ) : (\n            <ArrowDownSline className={selectStyles.iconStyle} />\n          )}\n        </div>\n        <DropDownMenu\n          menuRef={ref}\n          isOpen={isOpen}\n          mainRef={mainRef}\n          selectedOption={selectedOption}\n          selectItem={selectItem}\n          options={options}\n          size=\"l\"\n          bRadius={bRadius}\n        />\n      </div>\n    </>\n  );\n}\n"],"names":["RadioButton","forwardRef","checked","onChangeHandler","disabled","ref","handleChange","useCallback","e","_jsxs","radioBtnStyles","_jsx","input","rest","containerIcons","svgRound","RadioField","errorText","className","label","onChange","border","id","useId","useRef","checked2","clsx","radioStyles","bRadius","Paragraph","errorHintStyle","TextArea","onFocus","onBlur","value","labelS","setLabelS","useState","handleFocus","handleBlur","textareaStyles","TextField","endAdornment","endIcon","containerStyle","fieldWrap","inputStyle","fieldEndAdornment","fieldEndIcon","Select","onSelect","selectedOptionLabel","options","error","selectedOption","fullWidth","isOpen","setOpen","mainRef","toggle","close","useEventListener","useClickOutside","selectItem","optionValue","valueForSelect","_Fragment","select","selectStyles","ArrowUpSline","iconStyle","DropDownMenu"],"mappings":"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"}