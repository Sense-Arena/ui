{"version":3,"file":"Dropdown.stories-103205c6.js","sources":["../../src/components/dropdown/Dropdown.tsx"],"sourcesContent":["import { ReactNode, useCallback, useRef, useState } from 'react';\nimport { useClickOutside } from '../../hooks/useClickOutside';\nimport { useEventListener } from '../../hooks/useEventListener';\nimport { ArrowDownSline, ArrowUpSline } from '../../icons';\nimport { clsx } from '../../utils/clsx';\nimport { DropDownMenu } from '../dropdown-menu';\nimport { ddContainerStyle, ddIconStyle, ddText } from './dropdown.css';\n\ntype Props<TOption> = {\n  disabled?: boolean;\n  error?: boolean;\n  onSelect?: (selected: TOption) => void;\n  selectedOptionLabel: ReactNode;\n  selectedOption: TOption;\n  options: {\n    title: string;\n    value: TOption;\n  }[];\n  className?: string;\n  border?: 'black' | 'grey';\n  fullWidth?: boolean;\n  size?: 's' | 'm' | 'l';\n  bRadius?: 8 | 10;\n  dataSAId?: string;\n};\n\nexport function Dropdown<TOption>({\n  disabled,\n  onSelect,\n  selectedOptionLabel,\n  options,\n  error,\n  className,\n  selectedOption,\n  border,\n  fullWidth,\n  size,\n  bRadius,\n  dataSAId,\n}: Props<TOption>) {\n  const [isOpen, setOpen] = useState(false);\n\n  const ref = useRef<HTMLDivElement>(null);\n  const mainRef = useRef<HTMLDivElement>(null);\n\n  const toggle = useCallback(() => {\n    if (disabled) return;\n    setOpen(v => !v);\n  }, [disabled]);\n  const close = useCallback(() => setOpen(false), []);\n  useEventListener('keyup', close, 'Escape');\n  useClickOutside(ref, close, mainRef);\n\n  const selectItem = useCallback(\n    (optionValue: TOption) => {\n      onSelect?.(optionValue);\n      close();\n    },\n    [onSelect],\n  );\n\n  return (\n    <div\n      onClick={toggle}\n      className={clsx(ddContainerStyle({ disabled, error, opened: isOpen, border, fullWidth, size, bRadius }), className)}\n      ref={mainRef}\n      data-sa-id={dataSAId}\n    >\n      <span className={ddText}>{selectedOptionLabel}</span>\n      <div>{isOpen ? <ArrowUpSline className={ddIconStyle} /> : <ArrowDownSline className={ddIconStyle} />}</div>\n      <DropDownMenu\n        menuRef={ref}\n        isOpen={isOpen}\n        mainRef={mainRef}\n        selectedOption={selectedOption}\n        selectItem={selectItem}\n        options={options}\n        bRadius={bRadius}\n        dataSAId={dataSAId}\n      />\n    </div>\n  );\n}\n"],"names":["Dropdown","disabled","onSelect","selectedOptionLabel","options","error","className","selectedOption","border","fullWidth","size","bRadius","dataSAId","isOpen","setOpen","useState","ref","useRef","mainRef","toggle","useCallback","v","close","useEventListener","useClickOutside","selectItem","optionValue","React","clsx","ddContainerStyle","ddText","ArrowUpSline","ddIconStyle","ArrowDownSline","DropDownMenu"],"mappings":"2yBA0BO,SAAAA,EAAA,CAA2B,SAAAC,EAChC,SAAAC,EACA,oBAAAC,EACA,QAAAC,EACA,MAAAC,EACA,UAAAC,EACA,eAAAC,EACA,OAAAC,EACA,UAAAC,EACA,KAAAC,EACA,QAAAC,EACA,SAAAC,CAEF,EAAA,CACE,KAAA,CAAAC,EAAAC,CAAA,EAAAC,EAAA,SAAA,EAAA,EAEAC,EAAAC,SAAA,IAAA,EACAC,EAAAD,SAAA,IAAA,EAEAE,EAAAC,EAAAA,YAAA,IAAA,CACEnB,GACAa,EAAAO,GAAA,CAAAA,CAAA,CAAe,EAAA,CAAApB,CAAA,CAAA,EAEjBqB,EAAAF,EAAAA,YAAA,IAAAN,EAAA,EAAA,EAAA,CAAA,CAAA,EACAS,EAAA,QAAAD,EAAA,QAAA,EACAE,GAAAR,EAAAM,EAAAJ,CAAA,EAEA,MAAAO,EAAAL,EAAA,YAAmBM,GAAA,CAEfxB,GAAA,MAAAA,EAAAwB,GACAJ,GAAM,EACR,CAAApB,CAAA,CACS,EAGX,OAAAyB,EAAA,cACE,MAAC,CAAA,QAAAR,EACU,UAAAS,GAAAC,GAAA,CAAA,SAAA5B,EAAA,MAAAI,EAAA,OAAAQ,EAAA,OAAAL,EAAA,UAAAC,EAAA,KAAAC,EAAA,QAAAC,CAAA,CAAA,EAAAL,CAAA,EACyG,IAAAY,EAC7G,aAAAN,CACO,EAAAe,EAAA,cAAA,OAAA,CAAA,UAAAG,EAAA,EAAA3B,CAAA,EAEkCwB,EAAA,cAAA,MAAA,KAAAd,EAAAc,EAAA,cAAAI,GAAA,CAAA,UAAAC,CAAA,CAAA,EAAAL,EAAA,cAAAM,GAAA,CAAA,UAAAD,CAAA,CAAA,CAAA,EACuDL,EAAA,cACrGO,GAAC,CAAA,QAAAlB,EACU,OAAAH,EACT,QAAAK,EACA,eAAAX,EACA,WAAAkB,EACA,QAAArB,EACA,QAAAO,EACA,SAAAC,CACA,CAAA,CACF,CAGN;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}